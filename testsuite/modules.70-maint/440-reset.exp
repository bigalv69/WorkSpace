##############################################################################
#   Modules Revision 3.0
#   Providing a flexible user environment
#
#   File:		modules.70-maint/%M%
#   Revision:		%I%
#   First Edition:	2022/08/14
#   Last Mod.:		%U%, %G%
#
#   Authors:		Xavier Delaruelle, xavier.delaruelle@cea.fr
#
#   Description:	Testuite testsequence
#   Command:		reset, restore
#   Modulefiles:    foo, bar, qux, variant, reset
#   Sub-Command:
#
#   Comment:	%C{
#           Test reset sub-command
#		}C%
#
##############################################################################

set mp $modpath.3

#
# loaded environment is totally different than initial env
#

setenv_path_var MODULEPATH $modpath.2
setenv_loaded_module [list bar/1 qux/1] [list $modpath.2/bar/1 $modpath.2/qux/1]
setenv_var __MODULES_LMTAG bar/1&foo:qux/1&bar&foo
setenv_var __MODULES_LMEXTRATAG qux/1&bar

# no initial environment defined
unsetenv_var __MODULES_LMINIT
set ans [list]
lappend ans [list unset _LMFILES_]
lappend ans [list unset LOADEDMODULES]
lappend ans [list unset MODULEPATH]
lappend ans [list unset __MODULES_LMEXTRATAG]
lappend ans [list unset __MODULES_LMTAG]
set tserr [msg_unload {qux/1 <bar:foo>}]\n[msg_unload {bar/1 <foo>}]
testouterr_cmd sh reset $ans $tserr

# empty initial environment defined
setenv_var __MODULES_LMINIT {}
testouterr_cmd sh reset $ans $tserr

# initial environment = 0 modulepath, 1 module loaded fullpath
if {$plus_in_modpath && $install_advversspec eq {y}} {
    setenv_var MODULES_ADVANCED_VERSION_SPEC 0
}
setenv_var __MODULES_LMINIT "module load $mp/foo/1.0"
set ans [list]
lappend ans [list set _LMFILES_ $mp/foo/1.0]
lappend ans [list set LOADEDMODULES $mp/foo/1.0]
lappend ans [list unset MODULEPATH]
lappend ans [list unset __MODULES_LMEXTRATAG]
lappend ans [list unset __MODULES_LMTAG]
set tserr [msg_unload {qux/1 <bar:foo>}]\n[msg_unload {bar/1 <foo>}]\n[msg_load $mp/foo/1.0]
testouterr_cmd sh reset $ans $tserr
if {$plus_in_modpath && $install_advversspec eq {y}} {
    unsetenv_var MODULES_ADVANCED_VERSION_SPEC
}

# initial environment = 1 modulepath, 0 module loaded
setenv_var __MODULES_LMINIT "module use --append $mp"
set ans [list]
lappend ans [list unset _LMFILES_]
lappend ans [list unset LOADEDMODULES]
lappend ans [list set MODULEPATH $mp]
lappend ans [list unset __MODULES_LMEXTRATAG]
lappend ans [list unset __MODULES_LMTAG]
set tserr [msg_unload {qux/1 <bar:foo>}]\n[msg_unload {bar/1 <foo>}]
testouterr_cmd sh reset $ans $tserr

# initial environment = 1 modulepath with space, 1 loaded module with space
setenv_var __MODULES_LMINIT "module use --append {$modpath wspace}:module load {space yc/4}"
set ans [list]
lappend ans [list set _LMFILES_ "$modpath wspace/space yc/4"]
lappend ans [list set LOADEDMODULES "space yc/4"]
lappend ans [list set MODULEPATH "$modpath wspace"]
lappend ans [list unset __MODULES_LMEXTRATAG]
lappend ans [list unset __MODULES_LMTAG]
# get symbol already defined warning message as "modpath wspace" and "modpath.2"
# are the same directory, so module-version is evaluated twice
set tserr "[msg_unload {qux/1 <bar:foo>}]\n[msg_unload {bar/1 <foo>}]
$warn_msgs: Symbolic version 'deepvirt2/dir6/default' already defined
$warn_msgs: Symbolic version 'deepvirt2/dir6/sym' already defined
[msg_load {'space yc/4'}]"
testouterr_cmd sh reset $ans $tserr

# initial environment = 1 modulepath, X loaded modules with manual and modulerc-defined tags
setenv_var __MODULES_LMINIT "module use --append $mp:module load foo/0.2:module load --tag=auto-loaded foo/1.0:module load --tag=bar foo/0.load"
set ans [list]
lappend ans [list set __MODULES_LMALTNAME foo/0.2&foo/sym]
lappend ans [list set __MODULES_LMPREREQ foo/0.load&foo/1.0]
lappend ans [list set _LMFILES_ $mp/foo/0.2:$mp/foo/1.0:$mp/foo/0.load]
lappend ans [list set LOADEDMODULES foo/0.2:foo/1.0:foo/0.load]
lappend ans [list set MODULEPATH $mp]
lappend ans [list set __MODULES_LMEXTRATAG foo/0.load&bar]
lappend ans [list set __MODULES_LMTAG foo/0.2&tag:foo/1.0&auto-loaded:foo/0.load&bar]
set tserr [msg_unload {qux/1 <bar:foo>}]\n[msg_unload {bar/1 <foo>}]\n[msg_load {foo/0.2 <tag>}]\n[msg_load {foo/1.0 <aL>}]\n[msg_load {foo/0.load <bar>}]
testouterr_cmd sh reset $ans $tserr

skip_if_quick_mode


#
# loaded environment is empty
#

unsetenv_path_var MODULEPATH
unsetenv_loaded_module
unsetenv_var __MODULES_LMTAG
unsetenv_var __MODULES_LMEXTRATAG

# no initial environment defined
unsetenv_var __MODULES_LMINIT
testouterr_cmd sh reset OK {}

# empty initial environment defined
setenv_var __MODULES_LMINIT {}
testouterr_cmd sh reset OK {}

# initial environment = 0 modulepath, 1 module loaded fullpath
if {$plus_in_modpath && $install_advversspec eq {y}} {
    setenv_var MODULES_ADVANCED_VERSION_SPEC 0
}
setenv_var __MODULES_LMINIT "module load $mp/foo/1.0"
set ans [list]
lappend ans [list set _LMFILES_ $mp/foo/1.0]
lappend ans [list set LOADEDMODULES $mp/foo/1.0]
set tserr [msg_load $mp/foo/1.0]
testouterr_cmd sh reset $ans $tserr
if {$plus_in_modpath && $install_advversspec eq {y}} {
    unsetenv_var MODULES_ADVANCED_VERSION_SPEC
}

# initial environment = 1 modulepath, 0 module loaded
setenv_var __MODULES_LMINIT "module use --append $mp"
set ans [list]
lappend ans [list set MODULEPATH $mp]
testouterr_cmd sh reset $ans {}

# initial environment = 1 modulepath with space, 1 loaded module with space
setenv_var __MODULES_LMINIT "module use --append {$modpath wspace}:module load {space yc/4}"
set ans [list]
lappend ans [list set _LMFILES_ "$modpath wspace/space yc/4"]
lappend ans [list set LOADEDMODULES "space yc/4"]
lappend ans [list set MODULEPATH "$modpath wspace"]
set tserr "[msg_load {'space yc/4'}]"
testouterr_cmd sh reset $ans $tserr

# initial environment = 1 modulepath, X loaded modules with manual and modulerc-defined tags
setenv_var __MODULES_LMINIT "module use --append $mp:module load foo/0.2:module load --tag=auto-loaded foo/1.0:module load --tag=bar foo/0.load"
set ans [list]
lappend ans [list set __MODULES_LMALTNAME foo/0.2&foo/sym]
lappend ans [list set __MODULES_LMPREREQ foo/0.load&foo/1.0]
lappend ans [list set _LMFILES_ $mp/foo/0.2:$mp/foo/1.0:$mp/foo/0.load]
lappend ans [list set LOADEDMODULES foo/0.2:foo/1.0:foo/0.load]
lappend ans [list set __MODULES_LMEXTRATAG foo/0.load&bar]
lappend ans [list set __MODULES_LMTAG foo/0.2&tag:foo/1.0&auto-loaded:foo/0.load&bar]
lappend ans [list set MODULEPATH $mp]
set tserr [msg_load {foo/0.2 <tag>}]\n[msg_load {foo/1.0 <aL>}]\n[msg_load {foo/0.load <bar>}]
testouterr_cmd sh reset $ans $tserr


#
# loaded environment is similar, but different order, different tag
#

setenv_path_var MODULEPATH $modpath:$mp
setenv_loaded_module [list foo/1.0 foo/0.load foo/0.2] [list $mp/foo/1.0 $mp/foo/0.load $mp/foo/0.2]
setenv_var __MODULES_LMPREREQ foo/0.load&foo/1.0
setenv_var __MODULES_LMTAG foo/0.load&qux:foo/0.2&tag&other
setenv_var __MODULES_LMEXTRATAG foo/0.load&qux:foo/0.2&other

# initial environment = 1 modulepath, X loaded modules with manual and modulerc-defined tags
setenv_var __MODULES_LMINIT "module use --append $mp:module load foo/0.2:module load --tag=auto-loaded foo/1.0:module load --tag=bar foo/0.load"
set ans [list]
lappend ans [list set __MODULES_LMALTNAME foo/0.2&foo/sym]
lappend ans [list set __MODULES_LMPREREQ foo/0.load&foo/1.0]
lappend ans [list set _LMFILES_ $mp/foo/0.2:$mp/foo/1.0:$mp/foo/0.load]
lappend ans [list set LOADEDMODULES foo/0.2:foo/1.0:foo/0.load]
lappend ans [list set MODULEPATH $mp]
lappend ans [list set __MODULES_LMEXTRATAG foo/0.load&bar]
lappend ans [list set __MODULES_LMTAG foo/0.2&tag:foo/1.0&auto-loaded:foo/0.load&bar]
set tserr [msg_unload {foo/0.2 <other:tag>}]\n[msg_unload {foo/0.load <qux>}]\n[msg_unload {foo/1.0}]\n[msg_load {foo/0.2 <tag>}]\n[msg_load {foo/1.0 <aL>}]\n[msg_load {foo/0.load <bar>}]
testouterr_cmd sh reset $ans $tserr


#
# loaded environment is similar, same order but different tag
#

setenv_path_var MODULEPATH $mp
setenv_loaded_module [list foo/0.2 foo/1.0 foo/0.load] [list $mp/foo/0.2 $mp/foo/1.0 $mp/foo/0.load]
setenv_var __MODULES_LMPREREQ foo/0.load&foo/1.0
setenv_var __MODULES_LMTAG foo/0.2&tag&other:foo/1.0&foo:foo/0.load&qux
setenv_var __MODULES_LMEXTRATAG foo/0.2&other:foo/1.0&foo:foo/0.load&qux

# initial environment = 1 modulepath, X loaded modules with manual and modulerc-defined tags
setenv_var __MODULES_LMINIT "module use --append $mp:module load foo/0.2:module load --tag=auto-loaded foo/1.0:module load --tag=bar foo/0.load"
set ans [list]
lappend ans [list set __MODULES_LMPREREQ foo/0.load&foo/1.0]
lappend ans [list set _LMFILES_ $mp/foo/0.2:$mp/foo/1.0:$mp/foo/0.load]
lappend ans [list set LOADEDMODULES foo/0.2:foo/1.0:foo/0.load]
lappend ans [list set __MODULES_LMEXTRATAG foo/0.load&bar]
lappend ans [list set __MODULES_LMTAG foo/0.2&tag:foo/1.0&auto-loaded:foo/0.load&bar]
set tserr [msg_unload {foo/0.load <qux>}]\n[msg_unload {foo/1.0 <foo>}]\n[msg_tag {foo/0.2 <tag>}]\n[msg_load {foo/1.0 <aL>}]\n[msg_load {foo/0.load <bar>}]
testouterr_cmd sh reset $ans $tserr


#
# loaded environment is same as initial env
#

setenv_path_var MODULEPATH $mp
setenv_loaded_module [list foo/0.2 foo/1.0 foo/0.load] [list $mp/foo/0.2 $mp/foo/1.0 $mp/foo/0.load]
setenv_var __MODULES_LMPREREQ foo/0.load&foo/1.0
setenv_var __MODULES_LMTAG foo/0.2&tag:foo/1.0&auto-loaded:foo/0.load&bar
setenv_var __MODULES_LMEXTRATAG foo/0.load&bar

# initial environment = 1 modulepath, X loaded modules with manual and modulerc-defined tags
setenv_var __MODULES_LMINIT "module use --append $mp:module load foo/0.2:module load --tag=auto-loaded foo/1.0:module load --tag=bar foo/0.load"
testouterr_cmd sh reset OK {}

# restore __init__ is equivalent to reset
testouterr_cmd sh {restore __init__} OK {}


#
# loaded environment is inconsistent
#

setenv_path_var MODULEPATH $mp
setenv_loaded_module [list foo/0.load] [list $mp/foo/0.load]
setenv_var __MODULES_LMPREREQ foo/0.load&foo/1.0
setenv_var __MODULES_LMTAG foo/0.load&bar
setenv_var __MODULES_LMEXTRATAG foo/0.load&bar

# no initial environment defined
unsetenv_var __MODULES_LMINIT
set ans [list]
lappend ans [list unset __MODULES_LMPREREQ]
lappend ans [list unset _LMFILES_]
lappend ans [list unset LOADEDMODULES]
lappend ans [list unset MODULEPATH]
lappend ans [list unset __MODULES_LMEXTRATAG]
lappend ans [list unset __MODULES_LMTAG]
set tserr [msg_unload {foo/0.load <bar>}]
testouterr_cmd sh reset $ans $tserr

# empty initial environment defined
setenv_var __MODULES_LMINIT {}
testouterr_cmd sh reset $ans $tserr

# initial environment = 1 modulepath, 0 module loaded
setenv_var __MODULES_LMINIT "module use --append $mp"
set ans [list]
lappend ans [list unset __MODULES_LMPREREQ]
lappend ans [list unset _LMFILES_]
lappend ans [list unset LOADEDMODULES]
lappend ans [list unset __MODULES_LMEXTRATAG]
lappend ans [list unset __MODULES_LMTAG]
testouterr_cmd sh reset $ans $tserr

# initial environment = 1 modulepath, X loaded modules with manual and modulerc-defined tags
setenv_var __MODULES_LMINIT "module use --append $mp:module load foo/0.2:module load --tag=auto-loaded foo/1.0:module load --tag=bar foo/0.load"
set ans [list]
lappend ans [list set __MODULES_LMALTNAME foo/0.2&foo/sym]
lappend ans [list set __MODULES_LMPREREQ foo/0.load&foo/1.0]
lappend ans [list set _LMFILES_ $mp/foo/0.2:$mp/foo/1.0:$mp/foo/0.load]
lappend ans [list set LOADEDMODULES foo/0.2:foo/1.0:foo/0.load]
lappend ans [list set __MODULES_LMEXTRATAG foo/0.load&bar]
lappend ans [list set __MODULES_LMTAG foo/0.2&tag:foo/1.0&auto-loaded:foo/0.load&bar]
set tserr [msg_unload {foo/0.load <bar>}]\n[msg_load {foo/0.2 <tag>}]\n[msg_load {foo/1.0 <aL>}]\n[msg_load {foo/0.load <bar>}]
testouterr_cmd sh reset $ans $tserr

# restore __init__ is equivalent to reset
testouterr_cmd sh {restore __init__} $ans $tserr


#
# loaded environment contains sticky module
#

setenv_path_var MODULEPATH $modpath.2
setenv_loaded_module [list bar/1] [list $modpath.2/bar/1]
unsetenv_var __MODULES_LMPREREQ
setenv_var __MODULES_LMTAG bar/1&sticky
unsetenv_var __MODULES_LMEXTRATAG

# initial environment = 1 modulepath, X loaded modules with manual and modulerc-defined tags
setenv_var __MODULES_LMINIT "module use --append $mp:module load foo/0.2:module load --tag=auto-loaded foo/1.0:module load --tag=bar foo/0.load"
set ans [list]
lappend ans [list set __MODULES_LMALTNAME foo/0.2&foo/sym]
lappend ans [list set __MODULES_LMPREREQ foo/0.load&foo/1.0]
lappend ans [list set _LMFILES_ $mp/foo/0.2:$mp/foo/1.0:$mp/foo/0.load]
lappend ans [list set LOADEDMODULES foo/0.2:foo/1.0:foo/0.load]
lappend ans [list set __MODULES_LMEXTRATAG foo/0.load&bar]
lappend ans [list set MODULEPATH $mp]
lappend ans [list set __MODULES_LMTAG foo/0.2&tag:foo/1.0&auto-loaded:foo/0.load&bar]
set tserr [msg_unload {bar/1 <S>}]\n[msg_load {foo/0.2 <tag>}]\n[msg_load {foo/1.0 <aL>}]\n[msg_load {foo/0.load <bar>}]
# like restore sub-command, sticky modules are unloaded on a reset
testouterr_cmd sh reset $ans $tserr
testouterr_cmd sh {reset -f} $ans $tserr


#
# loaded environment contains super-sticky module
#

setenv_path_var MODULEPATH $modpath.2
setenv_loaded_module [list bar/1] [list $modpath.2/bar/1]
unsetenv_var __MODULES_LMPREREQ
setenv_var __MODULES_LMTAG bar/1&super-sticky
unsetenv_var __MODULES_LMEXTRATAG

# initial environment = 1 modulepath, X loaded modules with manual and modulerc-defined tags
setenv_var __MODULES_LMINIT "module use --append $mp:module load foo/0.2:module load --tag=auto-loaded foo/1.0:module load --tag=bar foo/0.load"
set ans [list]
lappend ans [list set __MODULES_LMALTNAME foo/0.2&foo/sym]
lappend ans [list set __MODULES_LMPREREQ foo/0.load&foo/1.0]
lappend ans [list set _LMFILES_ $modpath.2/bar/1:$mp/foo/0.2:$mp/foo/1.0:$mp/foo/0.load]
lappend ans [list set LOADEDMODULES bar/1:foo/0.2:foo/1.0:foo/0.load]
lappend ans [list set __MODULES_LMEXTRATAG foo/0.load&bar]
lappend ans [list set __MODULES_LMTAG bar/1&super-sticky:foo/0.2&tag:foo/1.0&auto-loaded:foo/0.load&bar]
lappend ans [list set MODULEPATH $mp]
lappend ans [list ERR]
set tserr [msg_unload {bar/1 <sS>} $err_superstickyunload]\n\n[msg_load {foo/0.2 <tag>}]\n[msg_load {foo/1.0 <aL>}]\n[msg_load {foo/0.load <bar>}]
testouterr_cmd sh reset $ans $tserr

# same result with --force mode
testouterr_cmd sh {reset -f} $ans $tserr


#
# a module in initial environment is now forbidden
#

setenv_var TESTSUITE_RESET_NOW_FORBIDDEN 1
setenv_path_var MODULEPATH $modpath.2
setenv_loaded_module [list bar/1] [list $modpath.2/bar/1]
unsetenv_var __MODULES_LMPREREQ
unsetenv_var __MODULES_LMTAG
unsetenv_var __MODULES_LMEXTRATAG

# initial environment = 1 modulepath, X loaded modules with manual and modulerc-defined tags
setenv_var __MODULES_LMINIT "module use --append $mp:module load foo/0.2:module load --tag=auto-loaded foo/1.0:module load --tag=bar foo/0.load"
set ans [list]
lappend ans [list set __MODULES_LMPREREQ foo/0.load&foo/1.0]
lappend ans [list set _LMFILES_ $mp/foo/1.0:$mp/foo/0.load]
lappend ans [list set LOADEDMODULES foo/1.0:foo/0.load]
lappend ans [list set __MODULES_LMEXTRATAG foo/0.load&bar]
lappend ans [list set __MODULES_LMTAG foo/1.0&auto-loaded:foo/0.load&bar]
lappend ans [list set MODULEPATH $mp]
lappend ans [list ERR]
set tserr [msg_unload bar/1]\n[err_accessdenied foo/0.2]\n[msg_load {foo/1.0 <aL>}]\n[msg_load {foo/0.load <bar>}]
testouterr_cmd sh reset $ans $tserr

unsetenv_var TESTSUITE_RESET_NOW_FORBIDDEN


#
# a module in initial environment specifies a variant
#

setenv_var TESTSUITE_VARIANT collinitrc
setenv_var MODULES_ADVANCED_VERSION_SPEC 1

setenv_path_var MODULEPATH $modpath.2
setenv_loaded_module [list bar/1] [list $modpath.2/bar/1]
unsetenv_var __MODULES_LMPREREQ
unsetenv_var __MODULES_LMTAG
unsetenv_var __MODULES_LMEXTRATAG
unsetenv_var __MODULES_LMVARIANT

# initial environment = 1 modulepath, 1 loaded modules with variant
setenv_var __MODULES_LMINIT "module use --append $mp:module load variant/1.0 +foo bar=val1"
set ans [list]
lappend ans [list set __MODULES_LMVARIANT variant/1.0&foo|1|1|1&bar|val1|0|0]
lappend ans [list set _LMFILES_ $mp/variant/1.0]
lappend ans [list set LOADEDMODULES variant/1.0]
lappend ans [list set MODULEPATH $mp]
set tserr [msg_unload bar/1]\n[msg_load {variant/1.0{bar=val1:+foo}}]
testouterr_cmd sh reset $ans $tserr

unsetenv_var TESTSUITE_VARIANT
unsetenv_var MODULES_ADVANCED_VERSION_SPEC


#
# loaded environment is similar, same order but different variant value
#

setenv_var TESTSUITE_VARIANT collinitrc
setenv_var MODULES_ADVANCED_VERSION_SPEC 1

setenv_path_var MODULEPATH $mp
setenv_loaded_module [list variant/1.0] [list $mp/variant/1.0]
unsetenv_var __MODULES_LMPREREQ
unsetenv_var __MODULES_LMTAG
unsetenv_var __MODULES_LMEXTRATAG
setenv_var __MODULES_LMVARIANT variant/1.0&foo|0|1|0&bar|val2|0|0

# initial environment = 1 modulepath, 1 loaded modules with variant
setenv_var __MODULES_LMINIT "module use --append $mp:module load variant/1.0 +foo bar=val1"
set ans [list]
lappend ans [list set __MODULES_LMVARIANT variant/1.0&foo|1|1|1&bar|val1|0|0]
lappend ans [list set _LMFILES_ $mp/variant/1.0]
lappend ans [list set LOADEDMODULES variant/1.0]
set tserr [msg_unload {variant/1.0{bar=val2:-foo}}]\n[msg_load {variant/1.0{bar=val1:+foo}}]
testouterr_cmd sh reset $ans $tserr

unsetenv_var TESTSUITE_VARIANT
unsetenv_var MODULES_ADVANCED_VERSION_SPEC


#
# loaded environment is totally different and a loaded module autoloads another one
#

setenv_path_var MODULEPATH $mp
setenv_loaded_module [list foo/1.0 reset/1] [list $mp/foo/1.0 $mp/reset/1]
setenv_var __MODULES_LMPREREQ reset/1&foo/1.0
setenv_var __MODULES_LMTAG foo/1.0&auto-loaded
unsetenv_var __MODULES_LMEXTRATAG
unsetenv_var __MODULES_LMVARIANT

# initial environment = 1 modulepath, X loaded modules
setenv_var __MODULES_LMINIT "module use --append $mp:module load --tag=auto-loaded foo/1.0:module load foo/0.load"

# autoload done with 'module load' in no-auto mode
setenv_var TESTSUITE_RESET load1
set ans [list]
lappend ans [list set __MODULES_LMPREREQ foo/0.load&foo/1.0]
lappend ans [list set _LMFILES_ $mp/foo/1.0:$mp/foo/0.load]
lappend ans [list set LOADEDMODULES foo/1.0:foo/0.load]
# auto-loaded foo/1.0 is not auto-unloaded by reset/1, as performed
# during a restore or purge sub-command
set tserr unload-1\n[msg_unload {reset/1}]\n[msg_load {foo/0.load}]
testouterr_cmd sh {reset --auto} $ans $tserr
testouterr_cmd sh {reset --no-auto} $ans $tserr

# autoload done with 'module switch' in no-auto mode
setenv_var TESTSUITE_RESET switch1
testouterr_cmd sh {reset --auto} $ans $tserr
testouterr_cmd sh {reset --no-auto} $ans $tserr

unsetenv_var TESTSUITE_RESET
unsetenv_var __MODULES_LMPREREQ


#
# reset_target_state set to __init__
#

setenv_var MODULES_RESET_TARGET_STATE __init__

setenv_path_var MODULEPATH $modpath.2
setenv_loaded_module [list bar/1 qux/1] [list $modpath.2/bar/1 $modpath.2/qux/1]
setenv_var __MODULES_LMTAG bar/1&foo:qux/1&bar&foo
setenv_var __MODULES_LMEXTRATAG qux/1&bar

# no initial environment defined
unsetenv_var __MODULES_LMINIT
set ans [list]
lappend ans [list unset _LMFILES_]
lappend ans [list unset LOADEDMODULES]
lappend ans [list unset MODULEPATH]
lappend ans [list unset __MODULES_LMEXTRATAG]
lappend ans [list unset __MODULES_LMTAG]
set tserr [msg_unload {qux/1 <bar:foo>}]\n[msg_unload {bar/1 <foo>}]
testouterr_cmd sh reset $ans $tserr

# initial environment = 1 modulepath, X loaded modules with manual and modulerc-defined tags
setenv_var __MODULES_LMINIT "module use --append $mp:module load foo/0.2:module load --tag=auto-loaded foo/1.0:module load --tag=bar foo/0.load"
set ans [list]
lappend ans [list set __MODULES_LMALTNAME foo/0.2&foo/sym]
lappend ans [list set __MODULES_LMPREREQ foo/0.load&foo/1.0]
lappend ans [list set _LMFILES_ $mp/foo/0.2:$mp/foo/1.0:$mp/foo/0.load]
lappend ans [list set LOADEDMODULES foo/0.2:foo/1.0:foo/0.load]
lappend ans [list set MODULEPATH $mp]
lappend ans [list set __MODULES_LMEXTRATAG foo/0.load&bar]
lappend ans [list set __MODULES_LMTAG foo/0.2&tag:foo/1.0&auto-loaded:foo/0.load&bar]
set tserr [msg_unload {qux/1 <bar:foo>}]\n[msg_unload {bar/1 <foo>}]\n[msg_load {foo/0.2 <tag>}]\n[msg_load {foo/1.0 <aL>}]\n[msg_load {foo/0.load <bar>}]
testouterr_cmd sh reset $ans $tserr


#
# reset_target_state set to __purge__
#

setenv_var MODULES_RESET_TARGET_STATE __purge__

setenv_path_var MODULEPATH $modpath.2
setenv_loaded_module [list bar/1 qux/1] [list $modpath.2/bar/1 $modpath.2/qux/1]
setenv_var __MODULES_LMTAG bar/1&foo:qux/1&bar&foo
setenv_var __MODULES_LMEXTRATAG qux/1&bar

# no initial environment defined
unsetenv_var __MODULES_LMINIT
set ans [list]
lappend ans [list unset _LMFILES_]
lappend ans [list unset LOADEDMODULES]
lappend ans [list unset __MODULES_LMEXTRATAG]
lappend ans [list unset __MODULES_LMTAG]
set tserr [msg_unload {qux/1 <bar:foo>}]\n[msg_unload {bar/1 <foo>}]
testouterr_cmd sh reset $ans $tserr

# initial environment = 1 modulepath, X loaded modules with manual and modulerc-defined tags
setenv_var __MODULES_LMINIT "module use --append $mp:module load foo/0.2:module load --tag=auto-loaded foo/1.0:module load --tag=bar foo/0.load"
testouterr_cmd sh reset $ans $tserr


#
# reset_target_state set to collection name
#

setenv_var HOME $env(HOME)/home

setenv_path_var MODULEPATH $modpath.2
setenv_loaded_module [list bar/1 qux/1] [list $modpath.2/bar/1 $modpath.2/qux/1]
setenv_var __MODULES_LMTAG bar/1&foo:qux/1&bar&foo
setenv_var __MODULES_LMEXTRATAG qux/1&bar

# unknown collection
setenv_var MODULES_RESET_TARGET_STATE unknown
# no initial environment defined
unsetenv_var __MODULES_LMINIT
set tserr [err_coll_notfound unknown]
testouterr_cmd sh reset ERR $tserr
# initial environment = 1 modulepath, X loaded modules with manual and modulerc-defined tags
setenv_var __MODULES_LMINIT "module use --append $mp:module load foo/0.2:module load --tag=auto-loaded foo/1.0:module load --tag=bar foo/0.load"
testouterr_cmd sh reset ERR $tserr
unsetenv_var __MODULES_LMINIT

# default collection
setenv_var MODULES_RESET_TARGET_STATE default
set ans [list]
lappend ans [list unset mload]
if {[is_conf_enabled advversspec implicitdefault]} {
    lappend ans [list set __MODULES_LMALTNAME loc_rc1/1.0&loc_rc1/foo:verssort/1.10&as|verssort/default&as|verssort/latest:loc_dv2/1.0&loc_dv2/default&loc_dv2]
} else {
    lappend ans [list set __MODULES_LMALTNAME loc_rc1/1.0&loc_rc1/foo:loc_dv2/1.0&loc_dv2/default&loc_dv2]
}
lappend ans [list set t15 t15]
lappend ans [list set testsuite yes]
lappend ans [list set _LMFILES_ $modpath/loc_rc1/1.0:$modpath/load/15:$modpath/verssort/1.10:$modpath/coll/a:$modpath/loc_dv2/1.0]
lappend ans [list set LOADEDMODULES loc_rc1/1.0:load/15:verssort/1.10:coll/a:loc_dv2/1.0]
lappend ans [list set MODULE_VERSION 1.10]
lappend ans [list set MODULEPATH $modpath]
lappend ans [list unset __MODULES_LMEXTRATAG]
lappend ans [list unset __MODULES_LMTAG]
set tserr "[msg_unload {qux/1 <bar:foo>}]\n[msg_unload {bar/1 <foo>}]\n[msg_load loc_rc1/1.0]\n[msg_load load/15]\n[msg_load verssort/1.10]\nload coll/a\n[msg_load coll/a]\n[msg_load loc_dv2/1.0]"
testouterr_cmd sh reset $ans $tserr

# other collection with target set
setenv_var MODULES_COLLECTION_TARGET target
setenv_var MODULES_RESET_TARGET_STATE coll4
set ans [list]
lappend ans [list unset _LMFILES_]
lappend ans [list unset LOADEDMODULES]
lappend ans [list set MODULEPATH $modpath:$modpath.2]
lappend ans [list unset __MODULES_LMEXTRATAG]
lappend ans [list unset __MODULES_LMTAG]
set tserr [msg_unload {qux/1 <bar:foo>}]\n[msg_unload {bar/1 <foo>}]
testouterr_cmd sh reset $ans $tserr

unsetenv_var MODULES_RESET_TARGET_STATE
unsetenv_var MODULES_COLLECTION_TARGET
setenv_var HOME $ORIG_HOME


#
#  Cleanup
#

reset_test_env
